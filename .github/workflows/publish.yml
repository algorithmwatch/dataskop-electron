name: Publish

# Build on Linux for Linux + Windows, and on macOS for macOS in order to keep precious macOS-usage down (10x more expensive).

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  publish:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        # os: [macos-latest]
        # os: [ubuntu-latest]

    steps:
      - name: Setup wine
        if: runner.os == 'Linux'
        run: >
          sudo dpkg --add-architecture i386 &&
          sudo apt-get update &&
          sudo apt-get install wine64

      - name: Checkout git repo
        uses: actions/checkout@v2

      - name: Install Node, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # NB: it used to work w/o "always-auth=true" but it's now required
      - name: Setup NPM auth token for font awesome pro & github packages
        run: >
          echo "always-auth=true" >> .npmrc &&
          echo "//npm.fontawesome.com/:_authToken=${{ secrets.FONT_AWESOME_TOKEN }}" >> .npmrc &&
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.READ_PACKAGES_TOKEN }}" >> .npmrc

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # - Using cached `node_modules`
      # - not running dev `postinstall` (used for dev)
      # - we need `yarn install` to t
      - name: Install dependencies
        run: yarn install --prefer-offline --frozen-lockfile --network-timeout 300000
        env:
          NOYARNPOSTINSTALL: 1

      - name: Postinstall for prod
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn run postinstall:prod

      # further below, we set ENV values for renderer + main
      # (maybe this can be fixed to always use this .env files)
      - name: Setup dotenv files (for renderer)
        run: >
          echo "PLATFORM_URL=${{ secrets.PLATFORM_URL }}" >> .env &&
          echo "TRACK_ROUTE_CHANGES=${{ secrets.TRACK_ROUTE_CHANGES }}" >> .env

      - name: Publish releases
        env:
          # macOS code signing
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # Windows code signing
          WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

          # Required when pushing releases to GitHub
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          # Push to S3-compliant Object Storage
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: >
          if [ "$RUNNER_OS" == "Linux" ]; then TARGET="--linux --win"; else TARGET="--mac"; fi &&
          yarn cross-env SENTRY_DSN=${{ secrets.SENTRY_DSN }} UPDATE_FEED_URL=${{ secrets.UPDATE_FEED_URL }} yarn build &&
          yarn electron-builder --publish always $TARGET

      # Add the notification step as the last one
      - uses: "marvinpinto/action-keybase-notifications@latest"
        if: runner.os == 'Linux'
        with:
          job_status: ${{ job.status }}
          opensentinel_token: ${{ secrets.OSL_TOKEN }}
          on_success: "always"
          on_failure: "never"
