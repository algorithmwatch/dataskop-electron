name: Publish release

# Build on Linux for Linux + Windows, and on macOS for macOS in order to keep precious macOS-usage down (10x more expensive).

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  publish:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        # os: [macos-latest]
        # os: [ubuntu-latest]

    steps:
      - name: Setup wine
        if: runner.os == 'Linux'
        run: >
          sudo dpkg --add-architecture i386 &&
          sudo apt-get update &&
          sudo apt-get install wine64

      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Checkout LFS objects
        run: git lfs checkout

      - name: Set current version (in tag)
        run: echo "GITHUB_TAG_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Install Node and NPM
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Setup NPM auth token for font awesome pro & github packages
        run: >
          echo "//npm.fontawesome.com/:_authToken=${{ secrets.FONT_AWESOME_TOKEN }}" >> .npmrc &&
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.READ_PACKAGES_TOKEN }}" >> .npmrc

      - name: Install dependencies
        run: npm ci --ignore-scripts

      # further below, we set ENV values for renderer + main
      # (maybe this can be fixed to always use this .env files)
      - name: Setup dotenv files (for renderer)
        run: >
          echo $GITHUB_TAG_VERSION &&
          if [[ $GITHUB_TAG_VERSION == *"beta"* ]]; then
          echo "PLATFORM_URL=${{ secrets.BETA_PLATFORM_URL }}" >> .env; else
          echo "PLATFORM_URL=${{ secrets.PLATFORM_URL }}" >> .env; fi &&
          echo "SERIOUS_PROTECTION=${{ secrets.SERIOUS_PROTECTION }}" >> .env &&
          echo "TRACK_EVENTS=${{ secrets.TRACK_EVENTS }}" >> .env

      - name: Publish releases
        env:
          # macOS code signing
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # Windows code signing
          WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

          # Required when pushing releases to GitHub
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          # Push to S3-compliant Object Storage
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: >
          if [ "$RUNNER_OS" == "Linux" ]; then TARGET="--linux --win"; else TARGET="--mac"; fi &&
          if [[ $GITHUB_TAG_VERSION == *"beta"* ]]; then SENTRY_DSN="${{ secrets.SENTRY_DSN }}"; else SENTRY_DSN=""; fi &&
          npm run postinstall &&
          npm run cross-env SENTRY_DSN=$SENTRY_DSN UPDATE_FEED_URL=${{ secrets.UPDATE_FEED_URL }} npm run build &&
          npm exec electron-builder -- --publish always $TARGET

      # Only notification for macOS since this runner takes usually the longest.
      - uses: "marvinpinto/action-keybase-notifications@latest"
        if: runner.os == 'macOS'
        with:
          job_status: ${{ job.status }}
          opensentinel_token: ${{ secrets.OSL_TOKEN }}
          on_success: "always"
          on_failure: "never"
