// helper function for getting time of day
function getTimeOfDay(entryHour) {
  let timeOfDay = "";
  if (entryHour >= 6 && entryHour < 12) {
    timeOfDay = "Morgens";
  } else if (entryHour >= 12 && entryHour < 18) {
    timeOfDay = "Mittags";
  } else if (entryHour < 22) {
    timeOfDay = "Abends";
  } else {
    timeOfDay = "Nachts";
  }

  return timeOfDay;
}

function addTimeOfDay(vidEntry) {
  // ******* make sure the "new Date" is not redundant ******
  
  let timeOfDay_curr = getTimeOfDay(entryHour);
  // else if (entryHour >= 22 || entryHour < 6) {
  //   // case (entryHour >= 22 || entryHour < 6):
  //     timeOfDay = "Nachts";
  // } else {  // ***** should I have a case for the possibility of there being an invalid hour? ***************************************************
  //   error: "invalid time"
  // }

  if (datePrev && timeOfDay_prev) {
    if (datePrev === date_curr) {
      if (timeOfDay_prev === timeOfDay_curr) {
        //recurse
      } else {
        let totalTime = (entryTime_curr - entryTime_first) / (1000 * 3600);
        entry = {
          // make object...
          Date: datePrev,
          TotalTime: totalTime,
          TimeOfDay: timeOfDay_prev,
        };
        overallActivity += totalTime;
        entryTime_first = entryTime_curr;
      }
    } else {
      let totalTime = (entryTime_first - entryTime_curr) / (1000 * 3600);
      entry = {
        // make object...
        Date: datePrev,
        TotalTime: totalTime,
        TimeOfDay: timeOfDay_prev,
      };
      overallActivity += totalTime;
      entryTime_first = entryTime_curr;
    }
  } else {
    entryTime_first = entryTime_curr;
  }

  datePrev = date_curr;
  timeOfDay_prev = timeOfDay_curr;

  // add new key-value pair
  // entry[TimeOfDay] = timeOfDay;

  // [totalTime, timeOfDay] = adding(entry);

  // delete VideoLink key-value pair (okay way to do this?)
  // delete vidEntry.VideoLink;
}

export function dateList() {
  let date_curr = new Date(vidEntry.Date);
  let entryHour = date_curr.getHours();
  let entryTime_curr = date_curr.getTime();

  let timeOfDay = getTimeOfDay(entryHour)
  // function for adding time spent watching, making TimeOfDay property, making date into date object, and computing overallActivity (in mins)
  let 
  // 1) Extract date data
  // ***** use map or forEach?
  // let videoData = data000.Activity["Video Browsing History"].VideoList.map(videos => ({
  //     Date: new Date(videos.Date),
  // }));

  let overallActivity = 0;
  let videoData =
    data000.Activity["Video Browsing History"].VideoList.map(addTimeOfDay);
  // videoData.forEach(addTimeOfDay)

  let videoData_length = videoData.length;

  let sumAllDays = 0;
  let total_per_day = videoData.map((videoObj) => )
  videoData.forEach((videoObj) => sumAllDays + videoObj.totalTime);

  // function averageTimePerDay(item, videoData_length, videoData) {
  //   videoData[item].totalTime +=
  // }

  return {overallActivity, videoData};
}